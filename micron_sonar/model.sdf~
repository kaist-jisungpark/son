<?xml version="1.0" ?>
<sdf version="1.5">
 
<model name="micron_sonar">
  <!-- Give the base link a unique name -->
  
  <link name="base">
  <gravity>false</gravity>
    <!-- Offset the base by half the lenght of the cylinder -->
    <pose>0 0 0.029500 0 0 0</pose> 
    <inertial>
      <mass>1.2</mass>
      <inertia>
        <ixx>0.001087473</ixx>
        <iyy>0.001087473</iyy>
        <izz>0.001092437</izz>
        <ixy>0</ixy>
        <ixz>0</ixz>
        <iyz>0</iyz>
      </inertia>
    </inertial>

    <collision name="base_collision">
      <geometry>
        <cylinder>
          <!-- Radius and length provided by Velodyne -->
          <radius>.02800</radius>
          <length>.05900</length>
        </cylinder>
      </geometry>
    </collision>

    <!-- The visual is mostly a copy of the collision -->
    <visual name="base_visual">
    <pose>0 0 -0.0300000 0 0 0</pose>
    <geometry>
    
    <!--    <cylinder> -->
          <!-- Radius and length provided by Velodyne -->
    <!--      <radius>.02800</radius> -->
    <!--      <length>.05900</length> -->
    <!--    </cylinder> -->

     <mesh>
       <!-- The URI should refer to the 3D mesh. The "model:"
           URI scheme indicates that the we are referencing a Gazebo
           model. -->
       <uri>model://micron_sonar/meshes/micron_sonar.dae</uri>
     </mesh>
    
    </geometry>
    </visual>
  </link>

  <!-- Give the base link a unique name -->
  <link name="top">
  <gravity>false</gravity>
    <!-- Vertically offset the top cylinder by the length of the bottom
        cylinder and half the length of this cylinder. -->
    <pose>0 0 0.064500 0 0 0</pose>
       <inertial>
     <mass>0.1</mass>
     <inertia>
       <ixx>0.000090623</ixx>
       <iyy>0.000090623</iyy>
       <izz>0.000091036</izz>
       <ixy>0</ixy>
       <ixz>0</ixz>
       <iyz>0</iyz>
     </inertia>
   </inertial>
    <collision name="top_collision">
      <geometry>
        <cylinder>
          <!-- Radius and length provided by Velodyne -->
          <radius>.01000</radius>
          <length>.01000</length>
        </cylinder>
      </geometry>
    </collision>

    <!-- The visual is mostly a copy of the collision -->
    <visual name="top_visual">
    <!--  <pose>0 0 -0.0376785 0 0 1.5707</pose> -->
      <geometry>

        <cylinder>
          <!-- Radius and length provided by Velodyne -->
          <radius>.01000</radius>
          <length>.01000</length>
        </cylinder>

     <!--<mesh> -->
       <!-- The URI should refer to the 3D mesh. The "model:"
           URI scheme indicates that the we are referencing a Gazebo
           model. -->
     <!--  <uri>model://velodyne_hdl32/meshes/velodyne_top.dae</uri> -->
     <!--</mesh> -->
      </geometry>
    </visual>

<!-- Add a ray sensor, and give it a name -->
<sensor type="ray" name="sensor">

  <!-- Position the ray sensor based on the specification. Also rotate
       it by 90 degrees around the X-axis so that the <horizontal> rays
       become vertical -->
  <pose>0 0 -0.004645 1.5707 0 0</pose>

  <!-- Enable visualization to see the rays in the GUI -->
  <visualize>true</visualize>

  <!-- Set the update rate of the sensor -->
  <update_rate>30</update_rate>


<ray>

  <!-- The scan element contains the horizontal and vertical beams.
       We are leaving out the vertical beams for this tutorial. -->
  <scan>

    <!-- The horizontal beams -->
    <horizontal>
      <!-- The velodyne has 32 beams(samples) -->
      <samples>32</samples>

      <!-- Resolution is multiplied by samples to determine number of
           simulated beams vs interpolated beams. See:
           http://sdformat.org/spec?ver=1.6&elem=sensor#horizontal_resolution
           -->
      <resolution>1</resolution>

      <!-- Minimum angle in radians -->
      <min_angle>-0.30540000</min_angle>

      <!-- Maximum angle in radians -->
      <max_angle>0.30540000</max_angle>
    </horizontal>

    <vertical>
      <!-- The velodyne has 32 beams(samples) -->
      <samples>5</samples>

      <!-- Resolution is multiplied by samples to determine number of
	   simulated beams vs interpolated beams. See:
	   http://sdformat.org/spec?ver=1.6&elem=sensor#horizontal_resolution
	   -->
      <resolution>1</resolution>

      <!-- Minimum angle in radians -->
      <min_angle>-0.04360000</min_angle>

      <!-- Maximum angle in radians -->
      <max_angle>0.04360000</max_angle>
    </vertical>

  </scan>

  <!-- Range defines characteristics of an individual beam -->
  <range>

    <!-- Minimum distance of the beam -->
    <min>0.05</min>

    <!-- Maximum distance of the beam -->
    <max>5</max>

    <!-- Linear resolution of the beam -->
    <resolution>0.02</resolution>
  </range>
</ray>


</sensor>



  </link>


<!-- Each joint must have a unique name -->
<joint type="revolute" name="joint">

  <!-- Position the joint at the bottom of the top link -->
  <pose>0 0 0.110000 0 0 0</pose>

  <!-- Use the base link as the parent of the joint -->
  <parent>base</parent>

  <!-- Use the top link as the child of the joint -->
  <child>top</child>

  <!-- The axis defines the joint's degree of freedom -->
  <axis>

    <!-- Revolve around the z-axis -->
    <xyz>0 0 1</xyz>

    <!-- Limit refers to the range of motion of the joint -->
    <limit>

      <!-- Use a very large number to indicate a continuous revolution -->
      <lower>-10000000000000000</lower>
      <upper>10000000000000000</upper>
    </limit>
  </axis>
</joint>

</model>

</sdf>
